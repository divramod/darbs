#!/usr/bin/env argsh
# shellcheck shell=bash
set -eu -o pipefail

# --- OPTIONS

# --- ACTIONS
# argsh(D|debug):                   des(Debug.)
# argsh(reset-to-origin-master):    des(Reset to master.)

# --- PATHS
: "${PATH_BASE:="$(git rev-parse --show-toplevel)"}"

# --- VARIABLES

# --- IMPORTS

# --- MAIN
_main() {
  # dependencies

  # actions
  for ACTION in ${ARGSH_ACTIONS}; do case "${ACTION}" in
    D|debug)                debug ;;
    reset-to-origin-master) reset_to_origin_master ;;
  esac; done
}

# --- FUNCTIONS
debug() {
  sleep 1
  chrome_open=$(ps aux | grep "chrome/chrome" | wc | awk '{print $1;}')
  [ "${chrome_open}" = "1" ] &&
    google-chrome & disown
  git open & disown
  sleep 1
}

reset_to_origin_master() {
  pwd
  local -r path_repo=$(pwd)
  local -r remote=$(git remote -v | grep "(fetch)" | awk '{print $2;}')
  echo "remote: ${remote}"
  cd ..
  rm -rf "${path_repo}"
  git clone "${remote}" "${path_repo}"
  cd "${path_repo}"
  git submodule update --init

  # git reset --hard HEAD
  # git clean -f -d
  # git checkout master
  # git fetch origin master
  # git reset --hard origin/master
  # git pull
  # git submodule update
  # git submodule update --init --recursive
  # git submodule foreach git reset --hard HEAD
  # git submodule foreach git clean -f -d
  # git submodule foreach git submodule update --init --recursive
  # git submodule foreach git fetch
  # git submodule foreach git pull
  # git status
}

# --- VALIDATORS

# --- RUN
[[ "${0}" != "${BASH_SOURCE[0]}" ]] || _main "${@}"
